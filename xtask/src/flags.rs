use std::path::PathBuf;

xflags::xflags! {
    src "./src/flags.rs"

    /// Run custom build command
    cmd xtask {
        /// runs tests with coverage
        cmd coverage {
            /// Report format. Either 'html', 'lcov', 'json' or 'text'
            optional -f,--format format: String
            /// Report output path. Default to STDOUT except for 'html' format.
            optional -o,--output output: PathBuf
            /// Opens a generated HTML report in a browser.
            optional --open
        }
        /// Runs the PHPUnit test suite
        cmd phpunit {
            /// arguments passed to the phpunit executable
            repeated args: String
        }
        /// Runs the PHPT test suite
        cmd phpt {
            /// arguments passed to the PHPT runner
            repeated args: String
        }
        /// Synchronizes bindgen output for docs.rs
        cmd sync-bindings {}
        /// Rebuilds this crate
        cmd rebuild-self {}
    }
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Xtask {
    pub subcommand: XtaskCmd,
}

#[derive(Debug)]
pub enum XtaskCmd {
    Coverage(Coverage),
    Phpunit(Phpunit),
    Phpt(Phpt),
    SyncBindings(SyncBindings),
    RebuildSelf(RebuildSelf),
}

#[derive(Debug)]
pub struct Coverage {
    pub format: Option<String>,
    pub output: Option<PathBuf>,
    pub open: bool,
}

#[derive(Debug)]
pub struct Phpunit {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct Phpt {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct SyncBindings;

#[derive(Debug)]
pub struct RebuildSelf;

impl Xtask {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
