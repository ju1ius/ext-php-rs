name: CI

on:
  # workflow_dispatch:
  schedule:
    # runs every monday at midnight
    - cron: "0 0 * * 1"
  push:
    branches:
      - master
      - ju1ius/*
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:

  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          os: ubuntu-latest
          llvm_version: "14"
          toolchain: stable
          components: rustfmt
      - name: Run rustfmt
        run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          os: ubuntu-latest
          llvm_version: "14"
          toolchain: stable
          components: clippy
      - name: Run clippy
#        run: cargo clippy --workspace --no-deps -- -D warnings
        run: cargo clippy --workspace --no-deps

  rustdoc:
    if: ${{ true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/setup-rust-php
        with:
          os: ubuntu-latest
          llvm_version: "14"
          rust_toolchain: stable
          php_version: "8.1"
          php_thread_safety: nts
      - name: Run rustdoc
        run: cargo rustdoc -- -D warnings
      - name: Build with docs stub
        env:
          DOCS_RS: ""
        run: |
          cargo clean -p ext-php-rs -p ext-php-rs-derive -p cargo-php
          cargo build

  coverage:
    # don't wait for clippy as it is slow and likely to succeed.
    needs: [fmt]
    runs-on: ${{ matrix.os }}
    name: coverage (${{ matrix.os }}, ${{ matrix.rust }}, PHP${{ matrix.php }}-${{ matrix.phpts }})
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        # php: ["8.0", "8.1"]
        php: ["8.1"]
        # rust: [stable, nightly]
        rust: [stable]
        clang: ["14"]
        # phpts: [ts, nts]
        phpts: [nts]
        exclude:
          # ext-php-rs requires nightly Rust when on Windows.
          - os: windows-latest
            rust: stable
          # setup-php doesn't support thread safe PHP on Linux and macOS.
          - os: macos-latest
            phpts: ts
          - os: ubuntu-latest
            phpts: ts
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/setup-rust-php
        with:
          os: ${{ matrix.os }}
          llvm_version: ${{ matrix.clang }}
          rust_toolchain: ${{ matrix.rust }}
          rust_components: llvm-tools-preview
          php_version: ${{ matrix.php }}
          php_thread_safety: ${{ matrix.phpts }}
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install composer dependencies
        working-directory: crates/php-testsuite
        run: composer install
      - name: Run test suite with coverage
        run: cargo xtask coverage -f lcov -o ${{ runner.temp }}/lcov.info
      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v3
        with:
#          fail_ci_if_error: true
          files: ${{ runner.temp }}/lcov.info
  # build-zts:
  #   name: Build with ZTS
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Build
  #       uses: ./.github/actions/zts

  conclusion:
    needs:
      - fmt
      - clippy
      - rustdoc
      - coverage
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Result
        run: |
          jq -C <<< "${needs}"
          # Check if all needs were successful or skipped.
          "$(jq -r 'all(.result as $result | (["success", "skipped"] | contains([$result])))' <<< "${needs}")"
        env:
          needs: ${{ toJson(needs) }}
